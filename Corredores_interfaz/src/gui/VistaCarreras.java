package gui;

import dto.Carrera;
import dto.TiemposCorredor;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import logic.LogicaCarrera;
import logic.LogicaCorredor;
import utils.ExcepcionesPropias;

/**
 *
 * @author silvia
 */
public class VistaCarreras extends javax.swing.JDialog {

    PantallaPrincipal pantallaPrincipal;
    Carrera carreraSeleccionada;

    /**
     * Creates new form PantallaCorredor
     *
     * @param parent
     * @param modal
     */
    public VistaCarreras(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.pantallaPrincipal = (PantallaPrincipal) parent;
        initComponents();
        setTitle("Carreras");
        setLocationRelativeTo(null);
        jTableCarreras.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        refrescarTablaCarreras();
        rellenarComboBoxOrdenCarreras();
        refrescarTablaTiemposCorredores();
        rellenarComboBoxOrdenCorredores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTituloVerCarreras = new javax.swing.JPanel();
        jLabelTituloVerCarreras = new javax.swing.JLabel();
        jPanelTablas = new javax.swing.JPanel();
        jScrollPaneCarreras = new javax.swing.JScrollPane();
        jTableCarreras = new javax.swing.JTable();
        jPanelComboBoxOrdenCarreras = new javax.swing.JPanel();
        jComboBoxOrdenCarreras = new javax.swing.JComboBox<>();
        jLabelOrdenCarreras = new javax.swing.JLabel();
        jScrollPaneCorredores = new javax.swing.JScrollPane();
        jTableCorredores = new javax.swing.JTable();
        jPanelComboBoxOrdenCorredores = new javax.swing.JPanel();
        jComboBoxOrdenCorredores = new javax.swing.JComboBox<>();
        jLabelOrdenCorredores = new javax.swing.JLabel();
        jPanelBotonesListaCarreras = new javax.swing.JPanel();
        jButtonVolver = new javax.swing.JButton();
        jButtonNueva = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();
        jButtonAddCorredor = new javax.swing.JButton();
        jButtonBorrarCorredor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        jPanelTituloVerCarreras.setMaximumSize(new java.awt.Dimension(600, 100));
        jPanelTituloVerCarreras.setMinimumSize(new java.awt.Dimension(600, 100));
        jPanelTituloVerCarreras.setPreferredSize(new java.awt.Dimension(600, 100));

        jLabelTituloVerCarreras.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabelTituloVerCarreras.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTituloVerCarreras.setText("CARRERAS");
        jLabelTituloVerCarreras.setMinimumSize(new java.awt.Dimension(400, 70));
        jLabelTituloVerCarreras.setPreferredSize(new java.awt.Dimension(400, 70));

        javax.swing.GroupLayout jPanelTituloVerCarrerasLayout = new javax.swing.GroupLayout(jPanelTituloVerCarreras);
        jPanelTituloVerCarreras.setLayout(jPanelTituloVerCarrerasLayout);
        jPanelTituloVerCarrerasLayout.setHorizontalGroup(
            jPanelTituloVerCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTituloVerCarrerasLayout.createSequentialGroup()
                .addContainerGap(200, Short.MAX_VALUE)
                .addComponent(jLabelTituloVerCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanelTituloVerCarrerasLayout.setVerticalGroup(
            jPanelTituloVerCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTituloVerCarrerasLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabelTituloVerCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        getContentPane().add(jPanelTituloVerCarreras, java.awt.BorderLayout.PAGE_START);

        jPanelTablas.setMaximumSize(new java.awt.Dimension(800, 400));
        jPanelTablas.setMinimumSize(new java.awt.Dimension(800, 400));
        jPanelTablas.setPreferredSize(new java.awt.Dimension(800, 400));

        jTableCarreras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCarreras.setMaximumSize(new java.awt.Dimension(190, 190));
        jTableCarreras.setMinimumSize(new java.awt.Dimension(100, 190));
        jTableCarreras.setPreferredSize(new java.awt.Dimension(190, 190));
        jTableCarreras.setSelectionBackground(new java.awt.Color(204, 204, 255));
        jTableCarreras.setSelectionForeground(new java.awt.Color(51, 0, 51));
        jTableCarreras.getTableHeader().setReorderingAllowed(false);
        jTableCarreras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCarrerasMouseClicked(evt);
            }
        });
        jScrollPaneCarreras.setViewportView(jTableCarreras);
        if (jTableCarreras.getColumnModel().getColumnCount() > 0) {
            jTableCarreras.getColumnModel().getColumn(0).setResizable(false);
            jTableCarreras.getColumnModel().getColumn(1).setResizable(false);
            jTableCarreras.getColumnModel().getColumn(2).setResizable(false);
        }

        jComboBoxOrdenCarreras.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxOrdenCarreras.setToolTipText("");
        jComboBoxOrdenCarreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenCarrerasActionPerformed(evt);
            }
        });

        jLabelOrdenCarreras.setText("Orden");

        javax.swing.GroupLayout jPanelComboBoxOrdenCarrerasLayout = new javax.swing.GroupLayout(jPanelComboBoxOrdenCarreras);
        jPanelComboBoxOrdenCarreras.setLayout(jPanelComboBoxOrdenCarrerasLayout);
        jPanelComboBoxOrdenCarrerasLayout.setHorizontalGroup(
            jPanelComboBoxOrdenCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComboBoxOrdenCarrerasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelComboBoxOrdenCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelOrdenCarreras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOrdenCarreras, 0, 113, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelComboBoxOrdenCarrerasLayout.setVerticalGroup(
            jPanelComboBoxOrdenCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComboBoxOrdenCarrerasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOrdenCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdenCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161))
        );

        jTableCorredores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCorredores.setMaximumSize(new java.awt.Dimension(190, 0));
        jTableCorredores.setMinimumSize(new java.awt.Dimension(100, 0));
        jTableCorredores.setPreferredSize(new java.awt.Dimension(190, 0));
        jTableCorredores.setSelectionBackground(new java.awt.Color(255, 204, 102));
        jTableCorredores.setSelectionForeground(new java.awt.Color(51, 0, 0));
        jTableCorredores.getTableHeader().setReorderingAllowed(false);
        jScrollPaneCorredores.setViewportView(jTableCorredores);
        if (jTableCorredores.getColumnModel().getColumnCount() > 0) {
            jTableCorredores.getColumnModel().getColumn(0).setResizable(false);
            jTableCorredores.getColumnModel().getColumn(1).setResizable(false);
            jTableCorredores.getColumnModel().getColumn(2).setResizable(false);
            jTableCorredores.getColumnModel().getColumn(3).setResizable(false);
            jTableCorredores.getColumnModel().getColumn(4).setResizable(false);
        }

        jComboBoxOrdenCorredores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxOrdenCorredores.setToolTipText("");
        jComboBoxOrdenCorredores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenCorredoresActionPerformed(evt);
            }
        });

        jLabelOrdenCorredores.setText("Orden");

        javax.swing.GroupLayout jPanelComboBoxOrdenCorredoresLayout = new javax.swing.GroupLayout(jPanelComboBoxOrdenCorredores);
        jPanelComboBoxOrdenCorredores.setLayout(jPanelComboBoxOrdenCorredoresLayout);
        jPanelComboBoxOrdenCorredoresLayout.setHorizontalGroup(
            jPanelComboBoxOrdenCorredoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComboBoxOrdenCorredoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelComboBoxOrdenCorredoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelOrdenCorredores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOrdenCorredores, 0, 113, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelComboBoxOrdenCorredoresLayout.setVerticalGroup(
            jPanelComboBoxOrdenCorredoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComboBoxOrdenCorredoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOrdenCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdenCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );

        javax.swing.GroupLayout jPanelTablasLayout = new javax.swing.GroupLayout(jPanelTablas);
        jPanelTablas.setLayout(jPanelTablasLayout);
        jPanelTablasLayout.setHorizontalGroup(
            jPanelTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTablasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCorredores, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                    .addComponent(jScrollPaneCarreras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelComboBoxOrdenCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelComboBoxOrdenCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanelTablasLayout.setVerticalGroup(
            jPanelTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTablasLayout.createSequentialGroup()
                .addComponent(jPanelComboBoxOrdenCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelComboBoxOrdenCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanelTablasLayout.createSequentialGroup()
                .addComponent(jScrollPaneCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanelTablas, java.awt.BorderLayout.LINE_START);

        jPanelBotonesListaCarreras.setMinimumSize(new java.awt.Dimension(640, 100));

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jButtonNueva.setText("Nueva");
        jButtonNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevaActionPerformed(evt);
            }
        });

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jButtonAddCorredor.setText("Insertar Corredor");
        jButtonAddCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCorredorActionPerformed(evt);
            }
        });

        jButtonBorrarCorredor.setText("Borrar Corredor");
        jButtonBorrarCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarCorredorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotonesListaCarrerasLayout = new javax.swing.GroupLayout(jPanelBotonesListaCarreras);
        jPanelBotonesListaCarreras.setLayout(jPanelBotonesListaCarrerasLayout);
        jPanelBotonesListaCarrerasLayout.setHorizontalGroup(
            jPanelBotonesListaCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotonesListaCarrerasLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(jPanelBotonesListaCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBotonesListaCarrerasLayout.createSequentialGroup()
                        .addComponent(jButtonModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBorrarCorredor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelBotonesListaCarrerasLayout.createSequentialGroup()
                        .addComponent(jButtonNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddCorredor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBorrar)))
                .addGap(165, 165, 165))
        );

        jPanelBotonesListaCarrerasLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAddCorredor, jButtonBorrar, jButtonBorrarCorredor, jButtonModificar, jButtonNueva, jButtonVolver});

        jPanelBotonesListaCarrerasLayout.setVerticalGroup(
            jPanelBotonesListaCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotonesListaCarrerasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBotonesListaCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddCorredor)
                    .addComponent(jButtonBorrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBotonesListaCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonModificar)
                    .addComponent(jButtonBorrarCorredor)
                    .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanelBotonesListaCarrerasLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonAddCorredor, jButtonBorrar, jButtonBorrarCorredor, jButtonModificar, jButtonNueva, jButtonVolver});

        getContentPane().add(jPanelBotonesListaCarreras, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed

    // TABLA CARRERAS
    private void refrescarTablaCarreras() {
        if (jTableCarreras.getSelectedRow() == -1) {
            this.carreraSeleccionada = null;
        }
        this.jTableCarreras.setModel(new TableModelCarrera());
    }

    private void rellenarComboBoxOrdenCarreras() {
        this.jComboBoxOrdenCarreras.setModel(new DefaultComboBoxModel<>(LogicaCarrera.getInstance().getOpcionesOrdenCarreras()));
    }

    private void jComboBoxOrdenCarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenCarrerasActionPerformed
        switch (jComboBoxOrdenCarreras.getSelectedIndex()) {
            case 0:
                LogicaCarrera.getInstance().ordenarId();
            case 1:
                LogicaCarrera.getInstance().ordenarFecha();
                break;
            case 2:
                LogicaCarrera.getInstance().ordenarMaxCorredores();
                break;
            case 3:
                LogicaCarrera.getInstance().ordenarNumCorredores();
                break;
        }
        refrescarTablaCarreras();
    }//GEN-LAST:event_jComboBoxOrdenCarrerasActionPerformed

    // BOTONES
    private void jButtonNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevaActionPerformed
        FormularioCarreras ventanaCarrera = new FormularioCarreras(pantallaPrincipal, true);
        ventanaCarrera.setVisible(true);
        refrescarTablaCarreras();
        refrescarTablaTiemposCorredores();
    }//GEN-LAST:event_jButtonNuevaActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        if (this.carreraSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Tienes que seleccionar una carrera", "Selecciona carrera", JOptionPane.INFORMATION_MESSAGE);
        } else {
            FormularioCarreras ventanaCarrera = new FormularioCarreras(pantallaPrincipal, true, this.carreraSeleccionada);
            ventanaCarrera.setVisible(true);
            refrescarTablaCarreras();
            refrescarTablaTiemposCorredores();
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        if (this.carreraSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Tienes que seleccionar una carrera", "Selecciona carrera", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                LogicaCarrera.getInstance().bajaCarrera(this.carreraSeleccionada);
                this.carreraSeleccionada = null;
            } catch (ExcepcionesPropias.CarreraNoEsta ex) {
                JOptionPane.showMessageDialog(this, "La carrera no esta en la lista de carreras", "Carrera no existe", JOptionPane.ERROR_MESSAGE);
            }
            refrescarTablaCarreras();
            refrescarTablaTiemposCorredores();
        }
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    // TABLA TIEMPOS CORREDORES
    private void refrescarTablaTiemposCorredores() {
        if (this.carreraSeleccionada == null) {
            this.jTableCorredores.setModel(new TableModelTiemposCorredor(new ArrayList<>()));
        } else {
            this.jTableCorredores.setModel(new TableModelTiemposCorredor(this.carreraSeleccionada.getListaCorredores()));
        }
    }

    private void rellenarComboBoxOrdenCorredores() {
        this.jComboBoxOrdenCorredores.setModel(new DefaultComboBoxModel<>(LogicaCorredor.getInstance().getOpcionesOrdenCorredores()));
    }

    private void jComboBoxOrdenCorredoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenCorredoresActionPerformed
        switch (jComboBoxOrdenCorredores.getSelectedIndex()) {
            case 0:
                LogicaCorredor.getInstance().ordenarDni();
                break;
            case 1:
                LogicaCorredor.getInstance().ordenarNombre();
                break;
            case 2:
                LogicaCorredor.getInstance().ordenarFechaNac();
                break;
        }
        refrescarTablaTiemposCorredores();
    }//GEN-LAST:event_jComboBoxOrdenCorredoresActionPerformed

    // INSERTAR CORREDORES
    private void jButtonAddCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCorredorActionPerformed
        if (this.carreraSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Tienes que seleccionar una carrera", "Carrera no seleccionada", JOptionPane.INFORMATION_MESSAGE);
        } else {
            VistaCorredores ventanaCorredores = new VistaCorredores(pantallaPrincipal, true, this.carreraSeleccionada);
            ventanaCorredores.setVisible(true);
            refrescarTablaCarreras();
            refrescarTablaTiemposCorredores();
        }
    }//GEN-LAST:event_jButtonAddCorredorActionPerformed

    // ENLACE TABLAS
    private void jTableCarrerasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCarrerasMouseClicked
        try {
            this.carreraSeleccionada = LogicaCarrera.getInstance().getCarreras().get(this.jTableCarreras.getSelectedRow());
            refrescarTablaTiemposCorredores();
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Tienes que seleccionar una carrera", "Selecciona carrera", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jTableCarrerasMouseClicked

    // BORRAR CORREDORES
    private void jButtonBorrarCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarCorredorActionPerformed
        if (this.carreraSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Tienes que seleccionar una carrera", "Carrera no seleccionada", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                List<TiemposCorredor> corredores = new ArrayList<>();
                for (int i : this.jTableCorredores.getSelectedRows()) {
                    corredores.add(this.carreraSeleccionada.getListaCorredores().get(i));
                }
                if (corredores.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Tienes que seleccionar un corredor", "Corredor no seleccionado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    LogicaCarrera.getInstance().delCorredores(this.carreraSeleccionada, corredores);
                    refrescarTablaTiemposCorredores();
                    refrescarTablaCarreras();
                }
            } catch (ExcepcionesPropias.CarreraCerrada ex) {
                JOptionPane.showMessageDialog(this, "La carrera está cerrada y no se pueden añadir corredores", "Carrera cerrada", JOptionPane.INFORMATION_MESSAGE);
            } catch (ExcepcionesPropias.CorredorNoEsta ex) {
                JOptionPane.showMessageDialog(this, "El corredor no se encuentra en la lista de la carrera", "Corredor no esta", JOptionPane.INFORMATION_MESSAGE);
            }
        }


    }//GEN-LAST:event_jButtonBorrarCorredorActionPerformed

    // MODELOS DE TABLA
    public static class TableModelCarrera extends AbstractTableModel {

        @Override
        public String getColumnName(int column) {
            return Carrera.DATOS[column];
        }

        @Override
        public int getRowCount() {
            return LogicaCarrera.getInstance().getCarreras().size();
        }

        @Override
        public int getColumnCount() {
            return Carrera.DATOS.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            String array[] = LogicaCarrera.getInstance().getCarreras().get(rowIndex).toArray();
            return array[columnIndex];
        }

    }

    public static class TableModelTiemposCorredor extends AbstractTableModel {

        private final List<TiemposCorredor> listaCorredores;

        public TableModelTiemposCorredor(List<TiemposCorredor> listaCorredores) {
            this.listaCorredores = listaCorredores;
        }

        @Override
        public String getColumnName(int column) {
            return TiemposCorredor.DATOS[column];
        }

        @Override
        public int getRowCount() {
            return listaCorredores.size();
        }

        @Override
        public int getColumnCount() {
            return TiemposCorredor.DATOS.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return listaCorredores.get(rowIndex).toArray()[columnIndex];
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddCorredor;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonBorrarCorredor;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonNueva;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxOrdenCarreras;
    private javax.swing.JComboBox<String> jComboBoxOrdenCorredores;
    private javax.swing.JLabel jLabelOrdenCarreras;
    private javax.swing.JLabel jLabelOrdenCorredores;
    private javax.swing.JLabel jLabelTituloVerCarreras;
    private javax.swing.JPanel jPanelBotonesListaCarreras;
    private javax.swing.JPanel jPanelComboBoxOrdenCarreras;
    private javax.swing.JPanel jPanelComboBoxOrdenCorredores;
    private javax.swing.JPanel jPanelTablas;
    private javax.swing.JPanel jPanelTituloVerCarreras;
    private javax.swing.JScrollPane jScrollPaneCarreras;
    private javax.swing.JScrollPane jScrollPaneCorredores;
    private javax.swing.JTable jTableCarreras;
    private javax.swing.JTable jTableCorredores;
    // End of variables declaration//GEN-END:variables
}
